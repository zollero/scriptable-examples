
/**
 * Author: zollero
 * Github: https://github.com/zollero
 * 
 */

const WEATHER_MAP = {
  'Êô¥': '‚òÄÔ∏è',
  'Â∞ë‰∫ë': 'üå§',
  'Êô¥Èó¥Â§ö‰∫ë': 'üå§',
  'Â§ö‰∫ë': '‚õÖÔ∏è',
  'Èò¥': '‚òÅÔ∏è',
  'ÊúâÈ£é': 'üå¨Ô∏è',
  'Âº∫È£é/Âä≤È£é': 'üå¨Ô∏è',
  'ÁñæÈ£é': 'üå¨Ô∏è',
  'Â§ßÈ£é': 'üå¨Ô∏è',
  'ÁÉàÈ£é': 'üå¨Ô∏è',
  'È£éÊö¥': 'üå™Ô∏è',
  'ÁãÇÁàÜÈ£é': 'üå™Ô∏è',
  'È£ìÈ£é': 'üå™Ô∏è',
  'ÈæôÂç∑È£é': 'üå™Ô∏è',
  'Èúæ': 'üå´Ô∏è',
  '‰∏≠Â∫¶Èúæ': 'üå´Ô∏è',
  'ÈáçÂ∫¶Èúæ': 'üå´Ô∏è',
  '‰∏•ÈáçÈúæ': 'üå´Ô∏è',
  'Èõæ': 'üå´Ô∏è',
  'ÊµìÈõæ': 'üå´Ô∏è',
  'Âº∫ÊµìÈõæ': 'üå´Ô∏è',
  'ËΩªÈõæ': 'üå´Ô∏è',
  'ÁâπÂº∫ÊµìÈõæ': 'üå´Ô∏è',
  'ÈòµÈõ®': 'üå¶Ô∏è',
  'Èõ∑ÈòµÈõ®': 'üå¶Ô∏è',
  'Èõ∑ÈòµÈõ®Âπ∂‰º¥ÊúâÂÜ∞Èõπ': '‚õàÔ∏è',
  'Â∞èÈõ®': 'üåßÔ∏è',
  '‰∏≠Èõ®': 'üåßÔ∏è',
  'Â§ßÈõ®': 'üåßÔ∏è',
  'Êö¥Èõ®': 'üåßÔ∏è',
  'Â§ßÊö¥Èõ®': 'üåßÔ∏è',
  'ÁâπÂ§ßÊö¥Èõ®': 'üåßÔ∏è',
  'Âº∫ÈòµÈõ®': '‚õàÔ∏è',
  'Âº∫Èõ∑ÈòµÈõ®': '‚õàÔ∏è',
  'ÊûÅÁ´ØÈôçÈõ®': 'üåßÔ∏è',
  'ÊØõÊØõÈõ®/ÁªÜÈõ®': 'üå¶Ô∏è',
  'Èõ®': 'üåßÔ∏è',
  'Â∞èÈõ®-‰∏≠Èõ®': 'üåßÔ∏è',
  '‰∏≠Èõ®-Â§ßÈõ®': 'üåßÔ∏è',
  'Â§ßÈõ®-Êö¥Èõ®': '‚õàÔ∏è',
  'Êö¥Èõ®-Â§ßÊö¥Èõ®': '‚õàÔ∏è',
  'Â§ßÊö¥Èõ®-ÁâπÂ§ßÊö¥Èõ®': '‚õàÔ∏è',
  'Èõ®Èõ™Â§©Ê∞î': 'üå®Ô∏è',
  'Èõ®Â§πÈõ™': 'üå®Ô∏è',
  'ÈòµÈõ®Â§πÈõ™': 'üå®Ô∏è',
  'ÂÜªÈõ®': 'üå®Ô∏è',
  'Èõ™': 'üå®Ô∏è',
  'ÈòµÈõ™': 'üå®Ô∏è',
  'Â∞èÈõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™': 'üå®Ô∏è',
  'Â§ßÈõ™': 'üå®Ô∏è',
  'Êö¥Èõ™': 'üå®Ô∏è',
  'Â∞èÈõ™-‰∏≠Èõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™-Â§ßÈõ™': 'üå®Ô∏è',
  'Â§ßÈõ™-Êö¥Èõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™-Â§ßÈõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™-Â§ßÈõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™-Â§ßÈõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™-Â§ßÈõ™': 'üå®Ô∏è',
  '‰∏≠Èõ™-Â§ßÈõ™': 'üå®Ô∏è',
};

const current = new Date();

const weekDays = ['Sun.', 'Mon.', 'Tue.', 'Wed.', 'Thur.', 'Fri.', 'Sat.'];

const bgImg = '/var/mobile/Library/Mobile Documents/iCloud~dk~simonbs~Scriptable/Documents/bg8.PNG';

const widget = new ListWidget();
widget.url = 'calshow://';

const calendars = await Calendar.forEvents();
const calendarEvents = await CalendarEvent.today(calendars);

Location.setAccuracyToHundredMeters();

const AMAP_KEY = '02f33d95d248f25fad4d99e687c38d96';
let decodeCity = `https://restapi.amap.com/v3/geocode/regeo?output=json&key=${AMAP_KEY}&radius=100&extensions=all`;
let baseWeatherUrl = `https://restapi.amap.com/v3/weather/weatherInfo?key=${AMAP_KEY}`;

(async () => {
  try {
    const location = await Location.current();
    const today = ('0' + (current.getMonth() + 1)).substr(-2) + '-' + ('0' + current.getDate()).substr(-2);
    decodeCity += `&location=${location.longitude},${location.latitude}`;

    const locationInfo = await new Request(decodeCity).loadJSON();

    if (locationInfo && locationInfo.regeocode) {
      const adCode = locationInfo.regeocode.addressComponent.adcode;
      baseWeatherUrl += `&city=${adCode}`
    }

    // Ëé∑ÂèñÂΩìÊó•Â§©Ê∞î https://lbs.amap.com/api/webservice/guide/api/weatherinfo
    const WEATHER = await new Request(baseWeatherUrl).loadJSON();

    let weatherInfo = {};

    if (WEATHER.lives && WEATHER.lives[0]) {
      weatherInfo = WEATHER.lives[0];
    }

    const weatherIcon = WEATHER_MAP[weatherInfo.weather];
    widget.backgroundImage = Image.fromFile(bgImg);

    const firstStack = widget.addStack();
    firstStack.layoutVertically();
    firstStack.spacing = 10;

    const weatherStack = firstStack.addStack();
    weatherStack.size = new Size(330, 300);
    weatherStack.layoutVertically();
    // weatherStack.centerAlignContent();
    // weatherStack.spacing = 10;

    // --------------- Â§©Ê∞î ---------------
    const temperatureStack = weatherStack.addStack();
    temperatureStack.layoutHorizontally();
    temperatureStack.addSpacer();
    const weatherLine = temperatureStack.addText(`${weatherIcon ? weatherIcon : weatherInfo.weather}`)
    temperatureStack.addSpacer();
    weatherLine.textColor = new Color('#ffffff');
    weatherLine.font = Font.mediumRoundedSystemFont(80);
    weatherLine.centerAlignText();

    const weatherInfoStack = weatherStack.addStack();
    weatherInfoStack.layoutHorizontally();
    weatherInfoStack.addSpacer();
    const weatherInfoText = weatherInfoStack.addText(weatherInfo.weather);
    weatherInfoText.textColor = new Color('#ffffff');
    weatherInfoText.font = Font.mediumRoundedSystemFont(16);
    weatherInfoStack.addSpacer();

    weatherStack.addSpacer();

    const dateStack = weatherStack.addStack();
    dateStack.layoutHorizontally();
    dateStack.addSpacer();
    const weekText = dateStack.addText(weekDays[current.getDay()] + '      ' + today);
    weekText.textColor = new Color('#ffffff');
    weekText.font = Font.regularMonospacedSystemFont(20);
    dateStack.addSpacer();

    weatherStack.addSpacer();

    const tempStack = weatherStack.addStack();
    tempStack.layoutHorizontally();
    tempStack.centerAlignContent();
    tempStack.addSpacer();
    const temperatureText = tempStack.addText(`${weatherInfo.temperature}¬∞`);
    temperatureText.textColor = new Color('#ffffff');
    temperatureText.font = Font.mediumMonospacedSystemFont(60);
    temperatureText.centerAlignText();
    tempStack.addSpacer();

    weatherStack.addSpacer();

    const cityStack = weatherStack.addStack();
    cityStack.layoutHorizontally();
    cityStack.addSpacer();
    const cityLine = cityStack.addText(weatherInfo.city);
    cityLine.font = Font.regularMonospacedSystemFont(20);
    cityLine.textColor = new Color('#ffffff');
    cityStack.addSpacer();

    weatherStack.addSpacer();

    widget.presentLarge();
    Script.setWidget(widget);
    Script.complete();
  } catch (error) {
    console.error(error);
  }
})();
